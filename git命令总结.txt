git init 仓库名称    //初始化一个本地仓库
git clone github链接 //克隆一个githup已有的仓库
git status //查看仓库的状态
git add 文件名字  //添加文件到暂存区
git rm --cached 文件名称  //把当前文件从暂存区拿回工作区
echo "内容" > 文件名字 //创建这个文件并且将内容写入
git commit -m "提交有关内容"，如果不通过-m指定，那么会以vim形式输入内容

添加到暂存区可以使用通配符操作
git add *.txt //表示添加当前文件夹下所有以txt作为后缀的文件到暂存区
git add .   //表示添加当前文件夹下的所有文件到暂存区

git commit //后面不指定提交信息，会进入一个交互界面，通过vim来编辑提交信息

git log //查看提交记录
git log --oneline //只显示简介的提交信息，只显示id和提交信息





git reset的三种模式
git reset --soft //表示退回到某个版本保留工作区和暂存区的修改内容
git reset --hard //表示退回到某个版本并且不保留工作区和暂存区的修改内容
git reset --mixed //表示回退到某个版本并且只保留工作区的修改内容，不保留暂存区的修改内容  ，默认是这种

cp -rf repo repo-soft //表示将仓库repo复制一份为repo-soft

ls查看工作区内容
git ls-files //查看暂存区内容

git reset 模式 HEAD^  //表示回退到当前版本的上一个版本
因为HEAD指向的是当前版本

git reflog //查看操作的历史记录，对于不满意的提交可以进行回溯

git diff  //默认的是查看工作区和暂存区的差异
git diff HEAD  //比较工作区和版本库的差异
git diff --cached  //比较暂存区和版本库之间的差异
git diff 版本1的id 版本2的id  //比较俩个版本的差异
git diff HEAD 版本2的id  //HEAD表示当前最新的提交的分支，所以这里是查看当前版本和另外一个版本的差异
git diff HEAD~ HEAD  
git diff HEAD^ HEAD //HEAD加上~或者^表示HEAD的上一个版本，这里表示查看当前版本和上一个版本的差异
git diff HEAD~2 HEAD  //波浪线后面还可以跟上数字，数字为几就表示和前几个版本的差异，但是^后面不能加数字
git diff HEAD^ HEAD 文件名  //后面还可以跟上文件名，表示只查看这个文件的差异

ls -l 和ls -ltr 都是查看本地仓库内容

rm 文件名  //在工作区删除这个文件，还需要重新添加到暂存区，这种操作比较麻烦
git rm 文件名   //直接将工作区和暂存区的这个文件全部删除，注意删除之后要记得提交，提交之后版本仓库中才会修改。

git ignore   //我们不需要将所有的文件全部提交到仓库，我们就应该忽略掉这些文件，那么我们应该忽略掉那些文件呢，有如下几种：
1.系统或软件自动生成的文件
2.编译产生的中间文件和结果文件
3.运行时生成的日志文件，缓存文件，临时文件
4.设计身份，密码，口令，密钥等敏感信息文件

echo "modifyed"  >> 文件内容   //表示追加内容到这个文件当中

vi .gitignore 当中写入内容，可以忽略掉某些形式的文件
写入access.log可以忽略名字为access的文件，并且可以使用通配符，使用*.log可以忽略所有以.log结尾的文件
但是如果是已经提交到仓库的文件，再到.gitignore中写入忽略就没有用了，就算是对仓库内的文件进行修改，只要已经提交了的，就无法忽略了
.gitignore生效有一个前提，就是这个文件不能是已经添加到版本库的文件，

git rm --cached 文件名，表示只删除暂存区的这个文件，本地不会删除

git 默认是不会将空的文件夹加入仓库的

git status -s  //其中s是short的简写，表示查看状态信息的简单情况

.gitignore中忽略文件夹后面要带一个斜杠，比如忽略temp文件夹，需要写入temp/

git commit -am ""  表示提交所有已经被跟踪的文件
git commit -m ""  //表示提交所有暂存区的文件

.gitignore忽略匹配规则


远程仓库
使用ssh方式必须要配置ssh密钥才能使用

首先cd ~进入根目录，然后cd .ssh进入配置密钥
配置ssh密钥,-t指定协议，-b后面指定大小
ssh-keygen -t rsa -b 4096
配置会生成一个test文件和一个test.pub文件，
test是我们新建密钥时指定的，具体根据自己指定变化，
test中存储的是私钥，谁也不要给
test.pub中存储的是公钥，配置到githup上
tail -5 config //创建一个新的配置文件

config文件内容

# github
Host github.com
HostName github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/test   ssh/后面表示默认使用的密钥,这里我们使用的test密钥

git本地仓库和远程仓库是独立的，我们需要使用git push和git pull命令进行同步
git push 表示将本地仓库同步到远程仓库
git pull 表示将远程仓库同步到本地仓库


12.关联本地仓库和远程仓库
git remote add origin githup仓库链接
git remote -v  //表示查看当前仓库对应的远程仓库的别名和地址
git branch -M main  //一开始默认是master分支,然后改为main分支
git push -u origin main  //其中-u是upstream的缩写
实际上的写法应该为git push -u origin main:main
表示把本地仓库的main分支推送给远程仓库的main分支
当本地仓库的名称和远程仓库的分支名称相同时，可以省略，只写一个
git pull origin main  //后面的origin 和main可以省略
如果省略，那么默认就是origin和main

如果本来就是从githup上面克隆下来的仓库不需要再简历远程连接
只有一个是自己建立的本地仓库，一个是githup上面的仓库才需要简历远程连接
把远程仓库的分支拉取到本地进行合并

执行git pull的时候远程仓库的修改和本地仓库的修改就会执行合并操作，如果没有冲突就直接合并，如果出现了冲突就需要手动处理冲突

还可以使用git fetch 拉取 但是这个命令只会获取远程仓库的修改，但是并不会自动合并到本地仓库中，需要我们手动合并


13.Gitee的使用和GitLab本地化部署
Gitee是国内的代码托管平台(中文名叫码云)，GitLab是私有化部署(中文名字叫极狐)
Gitee适用于有些公司对于代码的保密性较高，不允许放到github或者Gitee这种公有化的托管平台

Gitee的密钥配置和Github一样，但是Gitee只能创建私有仓库，但是创建完之后可以将其设置为公有仓库，现在貌似创建的时候就可以设置公共了

config文件要记得修改，只有配置了密钥才能git clone

gitLab和githup一样也要配置密钥，配置过程是一样的




分支：
每个人可以拥有自己的分支，然后做自己的事，例如可以专门开一个分支来处理bug和错误等等，然后可以开一个分支来扩展新功能。
分支的优点就是可以提交团队写作的效率，减少冲突和错误的影响，让团队中的每个人都能独立开发和测试

早期git版本中我们的默认分支就是master,由于这个词带有种族歧视的意思，后面就改为了main分支

git branch //查看当前拥有的分支
git branch 分支名称 //创建分支
git checkout 分支名称  //切换分支，同时checkout还有恢复文件的作用，如果使用checkout时文件名称和分支名称出现重复，那么会出现歧义，那么默认会切换分支，
为了避免这种现象，Git官方就设置了一个新的命令用来切换分支，这个命令就是     git switch 分支名称

git merge 将要被合并的分支
合并后的目标分支是哪个就需要切换到那个分支，也就是说我们当前所在分支是合并后的目标分支

查看合并分支图
git log --graph --oneline --decorate --all
被合并的分支被合并之后并不会删除，还会存在，需要我们手动删除
git branch -d 被合并分支名称，-d参数表示只能删除被合并的分支，没有被合并的分支无法删除
git branch -D 被合并分支名称,-D参数表示强制删除，就算是没有被合并的分支也可以删除

分支冲突处理
当多个分支的修改内容没有出现重合的情况下，会顺利的合并，但是如果出现多个分支修改同一个文件的同一行代码时，合并的时候git就不知道应该保留哪个分支的修改结果了，这个时候就会出现冲突了，就需要我们来解决冲突了

分支修改之后要记得提交，提交之后才可能会出现合并冲突
git diff可以查看冲突的具体内容
出现冲突之后，我们再次通过vi打开合并的冲突文件修改为我们想要修改的内容，修改之后保存退出，然后重新添加到暂存区之后提交，就可以发现冲突解决了，


出现冲突的时候，我们可以也可以选择中断合并
git merge --abort  //终端合并

git rebase 也可以执行分支合并操作
当前在dev分支
git rebase main 
此时当前是dev分支，main是目标分支
那么执行rebase操作，git会找到当前分支和目标分支的共同祖先，
然后会把当前分支从共同祖先到最新提交记录的所有提交都移动到目标分支的最新提交后面

git checkout -b dev 版本id

alias 重命名名字="原始命令"   //可以使用这个操作来重命名一些很长的命令

merge和rebase的区别
merge
优点：不会破坏原分支的提交历史，方便回溯和查看
缺点：会产生额外的提交结点，分支图比较复杂
rebase
优点：不会新增额外的提交记录，形成线性历史，比较直观和干净
缺点：会改变提交历史，改变了当前分支branch out的节点，避免在共享分支中使用

对于什么时候使用merge,什么时候使用git根据实际情况选择
一般如果你只是想要合并俩个分支，不关心提交历史，可以选择merge
如果你确定只有你自己在一个分支上开发并且你想要线性的比较清晰的提交历史，那么选择rebase








